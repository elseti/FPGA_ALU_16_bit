/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top2_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input [0:0] lsbInvert,
    input [7:0] customIn,
    input [5:0] alufn,
    input [0:0] testIn
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_sixteenFA_s;
  wire [4-1:0] M_sixteenFA_error;
  wire [1-1:0] M_sixteenFA_z;
  wire [1-1:0] M_sixteenFA_v;
  wire [1-1:0] M_sixteenFA_n;
  reg [16-1:0] M_sixteenFA_x;
  reg [16-1:0] M_sixteenFA_y;
  reg [1-1:0] M_sixteenFA_cin;
  sixteen_bit_adder_1 sixteenFA (
    .x(M_sixteenFA_x),
    .y(M_sixteenFA_y),
    .cin(M_sixteenFA_cin),
    .s(M_sixteenFA_s),
    .error(M_sixteenFA_error),
    .z(M_sixteenFA_z),
    .v(M_sixteenFA_v),
    .n(M_sixteenFA_n)
  );
  
  wire [16-1:0] M_sixteenBoolean_s;
  reg [4-1:0] M_sixteenBoolean_alufnsig;
  reg [16-1:0] M_sixteenBoolean_a;
  reg [16-1:0] M_sixteenBoolean_b;
  sixteen_boolean_2 sixteenBoolean (
    .alufnsig(M_sixteenBoolean_alufnsig),
    .a(M_sixteenBoolean_a),
    .b(M_sixteenBoolean_b),
    .s(M_sixteenBoolean_s)
  );
  
  wire [16-1:0] M_comp_lastSum;
  reg [2-1:0] M_comp_alufn;
  reg [1-1:0] M_comp_z;
  reg [1-1:0] M_comp_n;
  reg [1-1:0] M_comp_v;
  comparator_3 comp (
    .alufn(M_comp_alufn),
    .z(M_comp_z),
    .n(M_comp_n),
    .v(M_comp_v),
    .lastSum(M_comp_lastSum)
  );
  
  wire [16-1:0] M_shift_out;
  reg [16-1:0] M_shift_a;
  reg [16-1:0] M_shift_b;
  reg [2-1:0] M_shift_alufn;
  shifter_4 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .out(M_shift_out)
  );
  
  wire [16-1:0] M_mult_out;
  reg [16-1:0] M_mult_a;
  reg [16-1:0] M_mult_b;
  multiplier_5 mult (
    .a(M_mult_a),
    .b(M_mult_b),
    .out(M_mult_out)
  );
  
  wire [1-1:0] M_slowClock_value;
  counter_6 slowClock (
    .clk(clk),
    .rst(rst),
    .value(M_slowClock_value)
  );
  
  wire [4-1:0] M_autoTest_state;
  reg [1-1:0] M_autoTest_clk;
  reg [1-1:0] M_autoTest_rst;
  reg [1-1:0] M_autoTest_lsbInvert;
  tester_7 autoTest (
    .clk(M_autoTest_clk),
    .rst(M_autoTest_rst),
    .lsbInvert(M_autoTest_lsbInvert),
    .state(M_autoTest_state)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_8 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_sixteenFA_x[0+7-:8] = io_dip[0+7-:8];
    M_sixteenFA_x[8+7-:8] = io_dip[8+7-:8];
    M_sixteenFA_y[0+7-:8] = io_dip[16+7-:8];
    M_sixteenFA_y[8+7-:8] = customIn;
    M_sixteenFA_cin = alufn[0+0-:1];
    M_sixteenBoolean_a[0+7-:8] = io_dip[0+7-:8];
    M_sixteenBoolean_a[8+7-:8] = io_dip[8+7-:8];
    M_sixteenBoolean_b[0+7-:8] = io_dip[16+7-:8];
    M_sixteenBoolean_b[8+7-:8] = customIn;
    M_sixteenBoolean_alufnsig = alufn[0+3-:4];
    M_comp_alufn = alufn[1+1-:2];
    M_comp_z = M_sixteenFA_z;
    M_comp_v = M_sixteenFA_v;
    M_comp_n = M_sixteenFA_n;
    M_shift_a[0+7-:8] = io_dip[0+7-:8];
    M_shift_a[8+7-:8] = io_dip[8+7-:8];
    M_shift_b[0+7-:8] = io_dip[16+7-:8];
    M_shift_b[8+7-:8] = customIn;
    M_shift_alufn = alufn[0+1-:2];
    M_mult_a[0+7-:8] = io_dip[0+7-:8];
    M_mult_a[8+7-:8] = io_dip[8+7-:8];
    M_mult_b[0+7-:8] = io_dip[16+7-:8];
    M_mult_b[8+7-:8] = customIn;
    M_autoTest_rst = 1'h0;
    M_autoTest_clk = M_slowClock_value;
    M_autoTest_lsbInvert = lsbInvert;
    if (testIn == 1'h1) begin
      io_led[16+4+3-:4] = M_autoTest_state;
    end
    if (testIn == 1'h0) begin
      if (alufn == 6'h00 | alufn == 6'h01) begin
        M_sixteenFA_x[0+7-:8] = io_dip[0+7-:8];
        M_sixteenFA_x[8+7-:8] = io_dip[8+7-:8];
        M_sixteenFA_y[0+7-:8] = io_dip[16+7-:8];
        M_sixteenFA_y[8+7-:8] = customIn;
        M_sixteenFA_cin = alufn[0+0-:1];
        io_led[0+7-:8] = M_sixteenFA_s[0+7-:8];
        io_led[8+7-:8] = M_sixteenFA_s[8+7-:8];
        io_led[16+0+0-:1] = M_sixteenFA_z;
        io_led[16+2+0-:1] = M_sixteenFA_v;
        io_led[16+4+0-:1] = M_sixteenFA_n;
        io_led[16+4+3-:4] = M_sixteenFA_error;
      end
      if (alufn == 6'h18 | alufn == 6'h1e | alufn == 6'h16 | alufn == 6'h1a) begin
        M_sixteenBoolean_a[0+7-:8] = io_dip[0+7-:8];
        M_sixteenBoolean_a[8+7-:8] = io_dip[8+7-:8];
        M_sixteenBoolean_b[0+7-:8] = io_dip[16+7-:8];
        M_sixteenBoolean_b[8+7-:8] = customIn;
        M_sixteenBoolean_alufnsig = alufn[0+3-:4];
        io_led[0+7-:8] = M_sixteenBoolean_s[0+7-:8];
        io_led[8+7-:8] = M_sixteenBoolean_s[8+7-:8];
      end
      if (alufn == 6'h33 | alufn == 6'h35 | alufn == 6'h37) begin
        M_sixteenFA_x[0+7-:8] = io_dip[0+7-:8];
        M_sixteenFA_x[8+7-:8] = io_dip[8+7-:8];
        M_sixteenFA_y[0+7-:8] = io_dip[16+7-:8];
        M_sixteenFA_y[8+7-:8] = customIn;
        M_sixteenFA_cin = alufn[0+0-:1];
        M_comp_alufn = alufn[1+1-:2];
        M_comp_z = M_sixteenFA_z;
        M_comp_v = M_sixteenFA_v;
        M_comp_n = M_sixteenFA_n;
        io_led[0+0+0-:1] = M_comp_lastSum[0+0-:1];
      end
      if (alufn == 6'h20 | alufn == 6'h21 | alufn == 6'h23) begin
        M_shift_a[0+7-:8] = io_dip[0+7-:8];
        M_shift_a[8+7-:8] = io_dip[8+7-:8];
        M_shift_b[0+7-:8] = io_dip[16+7-:8];
        M_shift_b[8+7-:8] = customIn;
        M_shift_alufn = alufn[0+1-:2];
        io_led[0+7-:8] = M_shift_out[0+7-:8];
        io_led[8+7-:8] = M_shift_out[8+7-:8];
      end
      if (alufn == 6'h02) begin
        M_mult_a[0+7-:8] = io_dip[0+7-:8];
        M_mult_a[8+7-:8] = io_dip[8+7-:8];
        M_mult_b[0+7-:8] = io_dip[16+7-:8];
        M_mult_b[8+7-:8] = customIn;
        io_led[0+7-:8] = M_mult_out[0+7-:8];
        io_led[8+7-:8] = M_mult_out[8+7-:8];
      end
    end
  end
endmodule
