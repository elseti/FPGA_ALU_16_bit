/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top2_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input [0:0] lsbInvert,
    input [7:0] customIn,
    input [5:0] alufn,
    input [0:0] testIn
  );
  
  
  
  reg rst;
  
  wire [16-1:0] M_aluModule_res;
  wire [1-1:0] M_aluModule_z;
  wire [1-1:0] M_aluModule_v;
  wire [1-1:0] M_aluModule_n;
  reg [6-1:0] M_aluModule_alufn;
  reg [16-1:0] M_aluModule_a;
  reg [16-1:0] M_aluModule_b;
  alu_1 aluModule (
    .alufn(M_aluModule_alufn),
    .a(M_aluModule_a),
    .b(M_aluModule_b),
    .res(M_aluModule_res),
    .z(M_aluModule_z),
    .v(M_aluModule_v),
    .n(M_aluModule_n)
  );
  
  wire [1-1:0] M_slowClock_value;
  counter_2 slowClock (
    .clk(clk),
    .rst(rst),
    .value(M_slowClock_value)
  );
  
  wire [4-1:0] M_autoTest_state;
  reg [1-1:0] M_autoTest_clk;
  reg [1-1:0] M_autoTest_rst;
  reg [1-1:0] M_autoTest_lsbInvert;
  tester_3 autoTest (
    .clk(M_autoTest_clk),
    .rst(M_autoTest_rst),
    .lsbInvert(M_autoTest_lsbInvert),
    .state(M_autoTest_state)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_4 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    usb_tx = usb_rx;
    led = 8'h00;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_aluModule_a = 16'h0000;
    M_aluModule_b = 16'h0000;
    M_aluModule_alufn = alufn;
    M_autoTest_rst = 1'h0;
    M_autoTest_clk = M_slowClock_value;
    M_autoTest_lsbInvert = lsbInvert;
    if (testIn == 1'h1) begin
      io_led[16+4+3-:4] = M_autoTest_state;
    end
    if (testIn == 1'h0) begin
      M_aluModule_alufn = alufn;
      M_aluModule_a[0+7-:8] = io_dip[0+7-:8];
      M_aluModule_a[8+7-:8] = io_dip[8+7-:8];
      M_aluModule_b[0+7-:8] = io_dip[16+7-:8];
      M_aluModule_b[8+7-:8] = customIn;
      io_led[0+7-:8] = M_aluModule_res[0+7-:8];
      io_led[8+7-:8] = M_aluModule_res[8+7-:8];
      io_led[16+0+0-:1] = M_aluModule_z;
      io_led[16+1+0-:1] = M_aluModule_v;
      io_led[16+2+0-:1] = M_aluModule_n;
    end
  end
endmodule
