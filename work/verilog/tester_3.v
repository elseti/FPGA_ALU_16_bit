/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module tester_3 (
    input clk,
    input rst,
    input lsbInvert,
    output reg [3:0] state
  );
  
  
  
  
  localparam ADD_stateList = 3'd0;
  localparam MUL_stateList = 3'd1;
  localparam BOOL_stateList = 3'd2;
  localparam SHIFT_stateList = 3'd3;
  localparam COMPARE_stateList = 3'd4;
  localparam SUCCESS_stateList = 3'd5;
  localparam ERROR_stateList = 3'd6;
  
  reg [2:0] M_stateList_d, M_stateList_q = ADD_stateList;
  
  localparam ALUFN1 = 6'h00;
  
  localparam A1 = 16'h000f;
  
  localparam B1 = 16'h0003;
  
  localparam C1 = 16'h0012;
  
  localparam Z1 = 1'h0;
  
  localparam V1 = 1'h0;
  
  localparam N1 = 1'h0;
  
  localparam ALUFN2 = 6'h01;
  
  localparam A2 = 16'h0002;
  
  localparam B2 = 16'h0032;
  
  localparam C2 = 16'hffd0;
  
  localparam Z2 = 1'h0;
  
  localparam V2 = 1'h0;
  
  localparam N2 = 1'h1;
  
  localparam ALUFN0 = 6'h00;
  
  localparam A0 = 15'h2000;
  
  localparam B0 = 15'h2000;
  
  localparam C0 = 15'h4000;
  
  localparam ALUFN3 = 6'h02;
  
  localparam A3 = 16'h000c;
  
  localparam B3 = 16'h000f;
  
  localparam C3 = 16'h00b4;
  
  localparam ALUFN4 = 6'h18;
  
  localparam A4 = 16'h2000;
  
  localparam B4 = 16'h2800;
  
  localparam C4 = 16'h2000;
  
  localparam ALUFN5 = 6'h1e;
  
  localparam A5 = 16'h5000;
  
  localparam B5 = 16'h4800;
  
  localparam C5 = 16'h5800;
  
  localparam ALUFN6 = 6'h16;
  
  localparam A6 = 16'h5a00;
  
  localparam B6 = 16'hbb00;
  
  localparam C6 = 16'he100;
  
  localparam ALUFN7 = 6'h1a;
  
  localparam A7 = 16'hb580;
  
  localparam B7 = 16'ha4a8;
  
  localparam C7 = 16'hb580;
  
  localparam ALUFN8 = 6'h20;
  
  localparam A8 = 16'h6400;
  
  localparam B8 = 16'h0002;
  
  localparam C8 = 16'h9000;
  
  localparam ALUFN9 = 6'h21;
  
  localparam A9 = 16'hd000;
  
  localparam B9 = 16'h0005;
  
  localparam C9 = 16'h0680;
  
  localparam ALUFN10 = 6'h23;
  
  localparam A10 = 16'he800;
  
  localparam B10 = 16'h0003;
  
  localparam C10 = 16'hfd00;
  
  localparam ALUFN11 = 6'h33;
  
  localparam A11 = 16'h000f;
  
  localparam B11 = 16'h000f;
  
  localparam C11 = 16'h0001;
  
  localparam ALUFN12 = 6'h35;
  
  localparam A12 = 16'h0019;
  
  localparam B12 = 16'h0019;
  
  localparam C12 = 16'h0000;
  
  localparam ALUFN13 = 6'h37;
  
  localparam A13 = 16'h0037;
  
  localparam B13 = 16'h0037;
  
  localparam C13 = 16'h0001;
  
  wire [16-1:0] M_adder_s;
  wire [4-1:0] M_adder_error;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [16-1:0] M_adder_x;
  reg [16-1:0] M_adder_y;
  reg [1-1:0] M_adder_cin;
  sixteen_bit_adder_5 adder (
    .x(M_adder_x),
    .y(M_adder_y),
    .cin(M_adder_cin),
    .s(M_adder_s),
    .error(M_adder_error),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [16-1:0] M_adder2_s;
  wire [4-1:0] M_adder2_error;
  wire [1-1:0] M_adder2_z;
  wire [1-1:0] M_adder2_v;
  wire [1-1:0] M_adder2_n;
  reg [16-1:0] M_adder2_x;
  reg [16-1:0] M_adder2_y;
  reg [1-1:0] M_adder2_cin;
  sixteen_bit_adder_5 adder2 (
    .x(M_adder2_x),
    .y(M_adder2_y),
    .cin(M_adder2_cin),
    .s(M_adder2_s),
    .error(M_adder2_error),
    .z(M_adder2_z),
    .v(M_adder2_v),
    .n(M_adder2_n)
  );
  
  wire [16-1:0] M_multi_out;
  reg [16-1:0] M_multi_a;
  reg [16-1:0] M_multi_b;
  multiplier_9 multi (
    .a(M_multi_a),
    .b(M_multi_b),
    .out(M_multi_out)
  );
  
  wire [16-1:0] M_boolAND_s;
  reg [4-1:0] M_boolAND_alufnsig;
  reg [16-1:0] M_boolAND_a;
  reg [16-1:0] M_boolAND_b;
  sixteen_boolean_6 boolAND (
    .alufnsig(M_boolAND_alufnsig),
    .a(M_boolAND_a),
    .b(M_boolAND_b),
    .s(M_boolAND_s)
  );
  
  wire [16-1:0] M_boolOR_s;
  reg [4-1:0] M_boolOR_alufnsig;
  reg [16-1:0] M_boolOR_a;
  reg [16-1:0] M_boolOR_b;
  sixteen_boolean_6 boolOR (
    .alufnsig(M_boolOR_alufnsig),
    .a(M_boolOR_a),
    .b(M_boolOR_b),
    .s(M_boolOR_s)
  );
  
  wire [16-1:0] M_boolXOR_s;
  reg [4-1:0] M_boolXOR_alufnsig;
  reg [16-1:0] M_boolXOR_a;
  reg [16-1:0] M_boolXOR_b;
  sixteen_boolean_6 boolXOR (
    .alufnsig(M_boolXOR_alufnsig),
    .a(M_boolXOR_a),
    .b(M_boolXOR_b),
    .s(M_boolXOR_s)
  );
  
  wire [16-1:0] M_boolA_s;
  reg [4-1:0] M_boolA_alufnsig;
  reg [16-1:0] M_boolA_a;
  reg [16-1:0] M_boolA_b;
  sixteen_boolean_6 boolA (
    .alufnsig(M_boolA_alufnsig),
    .a(M_boolA_a),
    .b(M_boolA_b),
    .s(M_boolA_s)
  );
  
  wire [16-1:0] M_shiftSHL_out;
  reg [16-1:0] M_shiftSHL_a;
  reg [16-1:0] M_shiftSHL_b;
  reg [2-1:0] M_shiftSHL_alufn;
  shifter_8 shiftSHL (
    .a(M_shiftSHL_a),
    .b(M_shiftSHL_b),
    .alufn(M_shiftSHL_alufn),
    .out(M_shiftSHL_out)
  );
  
  wire [16-1:0] M_shiftSHR_out;
  reg [16-1:0] M_shiftSHR_a;
  reg [16-1:0] M_shiftSHR_b;
  reg [2-1:0] M_shiftSHR_alufn;
  shifter_8 shiftSHR (
    .a(M_shiftSHR_a),
    .b(M_shiftSHR_b),
    .alufn(M_shiftSHR_alufn),
    .out(M_shiftSHR_out)
  );
  
  wire [16-1:0] M_shiftSRA_out;
  reg [16-1:0] M_shiftSRA_a;
  reg [16-1:0] M_shiftSRA_b;
  reg [2-1:0] M_shiftSRA_alufn;
  shifter_8 shiftSRA (
    .a(M_shiftSRA_a),
    .b(M_shiftSRA_b),
    .alufn(M_shiftSRA_alufn),
    .out(M_shiftSRA_out)
  );
  
  wire [16-1:0] M_adderCMPEQ_s;
  wire [4-1:0] M_adderCMPEQ_error;
  wire [1-1:0] M_adderCMPEQ_z;
  wire [1-1:0] M_adderCMPEQ_v;
  wire [1-1:0] M_adderCMPEQ_n;
  reg [16-1:0] M_adderCMPEQ_x;
  reg [16-1:0] M_adderCMPEQ_y;
  reg [1-1:0] M_adderCMPEQ_cin;
  sixteen_bit_adder_5 adderCMPEQ (
    .x(M_adderCMPEQ_x),
    .y(M_adderCMPEQ_y),
    .cin(M_adderCMPEQ_cin),
    .s(M_adderCMPEQ_s),
    .error(M_adderCMPEQ_error),
    .z(M_adderCMPEQ_z),
    .v(M_adderCMPEQ_v),
    .n(M_adderCMPEQ_n)
  );
  
  wire [16-1:0] M_adderCMPLT_s;
  wire [4-1:0] M_adderCMPLT_error;
  wire [1-1:0] M_adderCMPLT_z;
  wire [1-1:0] M_adderCMPLT_v;
  wire [1-1:0] M_adderCMPLT_n;
  reg [16-1:0] M_adderCMPLT_x;
  reg [16-1:0] M_adderCMPLT_y;
  reg [1-1:0] M_adderCMPLT_cin;
  sixteen_bit_adder_5 adderCMPLT (
    .x(M_adderCMPLT_x),
    .y(M_adderCMPLT_y),
    .cin(M_adderCMPLT_cin),
    .s(M_adderCMPLT_s),
    .error(M_adderCMPLT_error),
    .z(M_adderCMPLT_z),
    .v(M_adderCMPLT_v),
    .n(M_adderCMPLT_n)
  );
  
  wire [16-1:0] M_adderCMPLE_s;
  wire [4-1:0] M_adderCMPLE_error;
  wire [1-1:0] M_adderCMPLE_z;
  wire [1-1:0] M_adderCMPLE_v;
  wire [1-1:0] M_adderCMPLE_n;
  reg [16-1:0] M_adderCMPLE_x;
  reg [16-1:0] M_adderCMPLE_y;
  reg [1-1:0] M_adderCMPLE_cin;
  sixteen_bit_adder_5 adderCMPLE (
    .x(M_adderCMPLE_x),
    .y(M_adderCMPLE_y),
    .cin(M_adderCMPLE_cin),
    .s(M_adderCMPLE_s),
    .error(M_adderCMPLE_error),
    .z(M_adderCMPLE_z),
    .v(M_adderCMPLE_v),
    .n(M_adderCMPLE_n)
  );
  
  wire [16-1:0] M_compCMPEQ_lastSum;
  reg [2-1:0] M_compCMPEQ_alufn;
  reg [1-1:0] M_compCMPEQ_z;
  reg [1-1:0] M_compCMPEQ_n;
  reg [1-1:0] M_compCMPEQ_v;
  comparator_7 compCMPEQ (
    .alufn(M_compCMPEQ_alufn),
    .z(M_compCMPEQ_z),
    .n(M_compCMPEQ_n),
    .v(M_compCMPEQ_v),
    .lastSum(M_compCMPEQ_lastSum)
  );
  
  wire [16-1:0] M_compCMPLT_lastSum;
  reg [2-1:0] M_compCMPLT_alufn;
  reg [1-1:0] M_compCMPLT_z;
  reg [1-1:0] M_compCMPLT_n;
  reg [1-1:0] M_compCMPLT_v;
  comparator_7 compCMPLT (
    .alufn(M_compCMPLT_alufn),
    .z(M_compCMPLT_z),
    .n(M_compCMPLT_n),
    .v(M_compCMPLT_v),
    .lastSum(M_compCMPLT_lastSum)
  );
  
  wire [16-1:0] M_compCMPLE_lastSum;
  reg [2-1:0] M_compCMPLE_alufn;
  reg [1-1:0] M_compCMPLE_z;
  reg [1-1:0] M_compCMPLE_n;
  reg [1-1:0] M_compCMPLE_v;
  comparator_7 compCMPLE (
    .alufn(M_compCMPLE_alufn),
    .z(M_compCMPLE_z),
    .n(M_compCMPLE_n),
    .v(M_compCMPLE_v),
    .lastSum(M_compCMPLE_lastSum)
  );
  
  always @* begin
    M_stateList_d = M_stateList_q;
    
    M_adder_x = 16'h000f;
    M_adder_y = 16'h0003;
    M_adder_cin = 1'h0;
    M_adder2_x = 16'h0002;
    M_adder2_y = 16'h0032;
    M_adder2_cin = 1'h1;
    M_multi_a = 16'h000c;
    M_multi_b = 16'h000f;
    M_boolAND_a = 16'h2000;
    M_boolAND_b = 16'h2800;
    M_boolAND_alufnsig = 4'h8;
    M_boolOR_a = 16'h5000;
    M_boolOR_b = 16'h4800;
    M_boolOR_alufnsig = 4'he;
    M_boolXOR_a = 16'h5a00;
    M_boolXOR_b = 16'hbb00;
    M_boolXOR_alufnsig = 4'h6;
    M_boolA_a = 16'hb580;
    M_boolA_b = 16'ha4a8;
    M_boolA_alufnsig = 4'ha;
    M_shiftSHL_a = 16'h6400;
    M_shiftSHL_b = 16'h0002;
    M_shiftSHL_alufn = 2'h0;
    M_shiftSHR_a = 16'hd000;
    M_shiftSHR_b = 16'h0005;
    M_shiftSHR_alufn = 2'h1;
    M_shiftSRA_a = 16'he800;
    M_shiftSRA_b = 16'h0003;
    M_shiftSRA_alufn = 2'h3;
    M_adderCMPEQ_x = 16'h000f;
    M_adderCMPEQ_y = 16'h000f;
    M_adderCMPEQ_cin = 1'h1;
    M_compCMPEQ_z = M_adderCMPEQ_z;
    M_compCMPEQ_v = M_adderCMPEQ_v;
    M_compCMPEQ_n = M_adderCMPEQ_n;
    M_compCMPEQ_alufn = 2'h1;
    M_adderCMPLT_x = 16'h0019;
    M_adderCMPLT_y = 16'h0019;
    M_adderCMPLT_cin = 1'h1;
    M_compCMPLT_z = M_adderCMPLT_z;
    M_compCMPLT_v = M_adderCMPLT_v;
    M_compCMPLT_n = M_adderCMPLT_n;
    M_compCMPLT_alufn = 2'h2;
    M_adderCMPLE_x = 16'h0037;
    M_adderCMPLE_y = 16'h0037;
    M_adderCMPLE_cin = 1'h1;
    M_compCMPLE_z = M_adderCMPLE_z;
    M_compCMPLE_v = M_adderCMPLE_v;
    M_compCMPLE_n = M_adderCMPLE_n;
    M_compCMPLE_alufn = 2'h3;
    if (lsbInvert == 1'h1) begin
      M_adder_x[0+0-:1] = 1'h0;
      M_adder2_x[0+0-:1] = 1'h0;
      M_multi_a[0+0-:1] = 1'h0;
    end
    
    case (M_stateList_q)
      ADD_stateList: begin
        state = 4'h1;
        if (M_adder_s == 16'h0012 && M_adder_z == 1'h0 && M_adder_v == 1'h0 && M_adder_n == 1'h0 && M_adder2_s == 16'hffd0 && M_adder2_z == 1'h0 && M_adder2_v == 1'h0 && M_adder2_n == 1'h1) begin
          M_stateList_d = MUL_stateList;
        end else begin
          M_stateList_d = ERROR_stateList;
        end
      end
      MUL_stateList: begin
        state = 4'h2;
        if (M_multi_out == 16'h00b4) begin
          M_stateList_d = BOOL_stateList;
        end else begin
          M_stateList_d = ERROR_stateList;
        end
      end
      BOOL_stateList: begin
        state = 4'h3;
        if (M_boolAND_s == 16'h2000 && M_boolOR_s == 16'h5800 && M_boolXOR_s == 16'he100 && M_boolA_s == 16'hb580) begin
          M_stateList_d = SHIFT_stateList;
        end else begin
          M_stateList_d = ERROR_stateList;
        end
      end
      SHIFT_stateList: begin
        state = 4'h4;
        if (M_shiftSHL_out == 16'h9000 && M_shiftSHR_out == 16'h0680 && M_shiftSRA_out == 16'hfd00) begin
          M_stateList_d = COMPARE_stateList;
        end else begin
          M_stateList_d = ERROR_stateList;
        end
      end
      COMPARE_stateList: begin
        state = 4'h5;
        if (M_compCMPEQ_lastSum == 16'h0001 && M_compCMPLT_lastSum == 16'h0000 && M_compCMPLE_lastSum == 16'h0001) begin
          M_stateList_d = SUCCESS_stateList;
        end else begin
          M_stateList_d = ERROR_stateList;
        end
      end
      SUCCESS_stateList: begin
        state = 4'h6;
      end
      ERROR_stateList: begin
        state = 4'hf;
      end
      default: begin
        M_stateList_d = ADD_stateList;
        state = 4'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_stateList_q <= 1'h0;
    end else begin
      M_stateList_q <= M_stateList_d;
    end
  end
  
endmodule
