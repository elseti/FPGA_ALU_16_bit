module au_top2 (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8], // DIP switches on IO Shield
    input lsbInvert[1],
    input customIn[8],
    input alufn[6],
    input testIn[1]
  ) {
  
  sig rst;                  // reset signal

  alu aluModule;
  
  counter slowClock(#SIZE(1), #DIV(28), .clk(clk), .rst(rst));
  
  //tester if testing mode is on
  tester autoTest;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
 
    
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    //some necessary declarations
    
    aluModule.a=16b0;
    aluModule.b=16b0;
    aluModule.alufn=alufn;
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //TESTING MODE
    
    autoTest.rst=0;
    autoTest.clk=slowClock.value;
    autoTest.lsbInvert= lsbInvert[0];
    
    if(testIn[0]==b1){
      io_led[2][7:4]= autoTest.state; //displays the state in first 4 leds IO
    }
    
    
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    //NOT TESTING MODE
    if(testIn[0]==b0){
    
      //instantiate alu
      aluModule.alufn= alufn;
      aluModule.a[7:0]= io_dip[0];
      aluModule.a[15:8]= io_dip[1];
      aluModule.b[7:0]= io_dip[2];
      aluModule.b[15:8]= customIn;
      
      io_led[0]= aluModule.res[7:0];
      io_led[1]= aluModule.res[15:8];
      io_led[2][0]= aluModule.z;
      io_led[2][1]= aluModule.v;
      io_led[2][2]= aluModule.n;
      
    }
    ///////////////////////////////////////////////////////////////////////////////////////////
    
  }
}