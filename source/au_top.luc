module au_top2 (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8], // DIP switches on IO Shield
    //output customout[1],
    input customIn[8],
    input alufn[6]
  ) {
  
  sig rst;                  // reset signal

  sixteen_bit_adder sixteenFA;
  sixteen_boolean sixteenBoolean;
  comparator comp;
  shifter shift;
  multiplier mult;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    //some necessary declarations but otherwise it doesnt affect
    
    sixteenFA.x[7:0]= io_dip[0];
    sixteenFA.x[15:8]= io_dip[1];
    sixteenFA.y[7:0]= io_dip[2];
    sixteenFA.y[15:8]= customIn;
    sixteenFA.cin= alufn[0];

    sixteenBoolean.a[7:0]= io_dip[0];
    sixteenBoolean.a[15:8]= io_dip[1];
    sixteenBoolean.b[7:0]= io_dip[2];
    sixteenBoolean.b[15:8]= customIn;
    sixteenBoolean.alufnsig= alufn[3:0];
    
    comp.alufn= alufn[2:1];
    comp.z= sixteenFA.z;
    comp.v= sixteenFA.v;
    comp.n= sixteenFA.n;
    
    shift.a[7:0]= io_dip[0];
    shift.a[15:8]= io_dip[1];
    shift.b[7:0]= io_dip[2];
    shift.b[15:8]= customIn;
    shift.alufn[1:0]= alufn[1:0];
    
    mult.a[7:0]= io_dip[0];
    mult.a[15:8]= io_dip[1];
    mult.b[7:0]= io_dip[2];
    mult.b[15:8]= customIn;
    
    
    if(alufn[5:0]==b000000 | alufn[5:0]==b000001){
      //16 bit full adder code
      
      sixteenFA.x[7:0]= io_dip[0];
      sixteenFA.x[15:8]= io_dip[1];
      sixteenFA.y[7:0]= io_dip[2];
      sixteenFA.y[15:8]= customIn;
      sixteenFA.cin= alufn[0];
      
      io_led[0]= sixteenFA.s[7:0];
      io_led[1]= sixteenFA.s[15:8];
      io_led[2][0]= sixteenFA.z;
      io_led[2][2]= sixteenFA.v;
      io_led[2][4]= sixteenFA.n;
      //io_led[2][6]= sixteenFA.cout;
    }
    
    //16-bit Boolean1
    if(alufn[5:0]==b011000 | alufn[5:0]==b011110 | alufn[5:0]== b010110 | alufn[5:0]==b011010){ //or and 
      sixteenBoolean.a[7:0]= io_dip[0];
      sixteenBoolean.a[15:8]= io_dip[1];
      sixteenBoolean.b[7:0]= io_dip[2];
      sixteenBoolean.b[15:8]= customIn;
      sixteenBoolean.alufnsig= alufn[3:0];
      
      io_led[0]= sixteenBoolean.s[7:0];
      io_led[1]= sixteenBoolean.s[15:8];
    }

    
    //comparator
    if(alufn[5:0]==b110011 | alufn[5:0]==b110101 | alufn[5:0]==b110111){
      sixteenFA.x[7:0]= io_dip[0];
      sixteenFA.x[15:8]= io_dip[1];
      sixteenFA.y[7:0]= io_dip[2];
      sixteenFA.y[15:8]= customIn;
      sixteenFA.cin= alufn[0]; //honestly it should always be 1 here (substract)
      
      comp.alufn= alufn[2:1];
      comp.z= sixteenFA.z;
      comp.v= sixteenFA.v;
      comp.n= sixteenFA.n;
      
      io_led[0][0]= comp.lastSum[0];
      
    }
    //
    if(alufn[5:0]==b100000 | alufn[5:0]==b100001 | alufn[5:0]==b100011){
      shift.a[7:0]= io_dip[0];
      shift.a[15:8]= io_dip[1];
      shift.b[7:0]= io_dip[2];
      shift.b[15:8]= customIn;
      shift.alufn[1:0]= alufn[1:0];
      
      io_led[0]= shift.out[7:0];
      io_led[1]= shift.out[15:8];
    }
    
    if(alufn[5:0]==b000010){
      mult.a[7:0]= io_dip[0];
      mult.a[15:8]= io_dip[1];
      mult.b[7:0]= io_dip[2];
      mult.b[15:8]= customIn;
      
      io_led[0]= mult.out[7:0];
      io_led[1]= mult.out[15:8];
     
    }
    
  }
}